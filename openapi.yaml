openapi: 3.0.0
info:
  title: Google Sheets API Proxy
  version: 1.0.0
  description: Proxy service for Google Sheets API v4

servers:
  - url: https://your-deployment.vercel.app

paths:
  /api/values/append:
    post:
      operationId: appendValues
      summary: Append new rows to the end of a sheet
      description: Adds new rows of data to the bottom of an existing range. Use this when you want to ADD data without overwriting. The API finds the last row with data and appends below it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spreadsheetId
                - range
                - valueInputOption
                - values
              properties:
                spreadsheetId:
                  type: string
                  description: The ID of the spreadsheet (found in URL after /d/)
                  example: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
                range:
                  type: string
                  description: A1 notation of where to append (e.g. Sheet1!A1 or just Sheet1)
                  example: "Sheet1!A1"
                valueInputOption:
                  type: string
                  description: How to interpret input - USER_ENTERED parses strings as formulas/dates, RAW keeps as-is
                  enum: [USER_ENTERED, RAW]
                  default: USER_ENTERED
                values:
                  type: array
                  description: 2D array of values. Each inner array is one row.
                  items:
                    type: array
                    items: {}
                  example: [["Alice", "alice@example.com", "555-1234"], ["Bob", "bob@example.com", "555-5678"]]
                insertDataOption:
                  type: string
                  description: INSERT_ROWS to push existing data down, OVERWRITE to replace
                  enum: [INSERT_ROWS, OVERWRITE]
                  default: OVERWRITE
            example:
              spreadsheetId: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
              range: "Sheet1!A1"
              valueInputOption: "USER_ENTERED"
              values: [["Alice", "alice@example.com", "555-1234"]]
      responses:
        '200':
          description: Successfully appended data

  /api/values/update:
    put:
      operationId: updateValues
      summary: Overwrite existing values in a specific range
      description: Replaces existing data in the specified range. Use this when you want to OVERWRITE specific cells with new data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spreadsheetId
                - range
                - valueInputOption
                - values
              properties:
                spreadsheetId:
                  type: string
                  description: The ID of the spreadsheet
                  example: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
                range:
                  type: string
                  description: A1 notation of exact range to update (e.g. Sheet1!A2:C2)
                  example: "Sheet1!A2:C2"
                valueInputOption:
                  type: string
                  enum: [USER_ENTERED, RAW]
                  default: USER_ENTERED
                values:
                  type: array
                  description: 2D array of values. Each inner array is one row.
                  items:
                    type: array
                    items: {}
                  example: [["Updated Name", "updated@example.com", "555-9999"]]
            example:
              spreadsheetId: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
              range: "Sheet1!A2:C2"
              valueInputOption: "USER_ENTERED"
              values: [["Bob", "bob@example.com", "555-5678"]]
      responses:
        '200':
          description: Successfully updated data

  /api/values/get:
    get:
      operationId: getValues
      summary: Read values from a range
      description: Retrieves data from the specified range in a Google Sheet. Returns values as a 2D array.
      parameters:
        - name: spreadsheetId
          in: query
          required: true
          description: The ID of the spreadsheet
          schema:
            type: string
          example: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
        - name: range
          in: query
          required: true
          description: A1 notation of range to retrieve (e.g. Sheet1!A1:C10)
          schema:
            type: string
          example: "Sheet1!A1:C10"
        - name: majorDimension
          in: query
          required: false
          description: Whether to return rows or columns
          schema:
            type: string
            enum: [ROWS, COLUMNS]
            default: ROWS
      responses:
        '200':
          description: Successfully retrieved data

  /api/values/clear:
    post:
      operationId: clearValues
      summary: Clear all values in a range
      description: Removes all data from the specified range. Keeps formatting intact. Use this to delete content from cells while preserving the sheet structure.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spreadsheetId
                - range
              properties:
                spreadsheetId:
                  type: string
                  description: The ID of the spreadsheet
                  example: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
                range:
                  type: string
                  description: A1 notation of range to clear
                  example: "Sheet1!A2:C10"
            example:
              spreadsheetId: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
              range: "Sheet1!A2:C10"
      responses:
        '200':
          description: Successfully cleared range

  /api/values/batchUpdate:
    post:
      operationId: batchUpdateValues
      summary: Update multiple ranges at once
      description: Updates multiple ranges in a single request. More efficient than multiple individual update calls.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spreadsheetId
                - valueInputOption
                - data
              properties:
                spreadsheetId:
                  type: string
                  description: The ID of the spreadsheet
                  example: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
                valueInputOption:
                  type: string
                  enum: [USER_ENTERED, RAW]
                  default: USER_ENTERED
                data:
                  type: array
                  description: Array of ranges to update
                  items:
                    type: object
                    required:
                      - range
                      - values
                    properties:
                      range:
                        type: string
                        description: A1 notation
                        example: "Sheet1!A1:B1"
                      values:
                        type: array
                        items:
                          type: array
                        example: [["Header 1", "Header 2"]]
            example:
              spreadsheetId: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
              valueInputOption: "USER_ENTERED"
              data:
                - range: "Sheet1!A1:B1"
                  values: [["Name", "Email"]]
                - range: "Sheet1!A2:B2"
                  values: [["John", "john@example.com"]]
      responses:
        '200':
          description: Successfully updated multiple ranges

  /api/spreadsheets/create:
    post:
      operationId: createSpreadsheet
      summary: Create a new Google Spreadsheet
      description: Creates a brand new spreadsheet. Returns the spreadsheetId you will use for other operations.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                properties:
                  type: object
                  properties:
                    title:
                      type: string
                      description: The name of the new spreadsheet
                      example: "My New Spreadsheet"
                sheets:
                  type: array
                  description: Initial sheets to create
                  items:
                    type: object
            example:
              properties:
                title: "Sales Data 2025"
              sheets:
                - properties:
                    title: "January"
      responses:
        '200':
          description: Successfully created spreadsheet
