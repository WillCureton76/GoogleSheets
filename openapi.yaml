openapi: 3.1.0
info:
  title: Brian the Estimating Bot â€“ Google Sheets Proxy
  version: 1.0.3
  description: >
    Proxy exposing Google Sheets v4 operations through two consolidated handlers.
    All /api/values/* and /api/spreadsheets/* routes are rewritten internally
    to dispatch via __subpath to the Google Sheets API.

servers:
  - url: https://google-sheets-restored.vercel.app

components:
  securitySchemes:
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            https://www.googleapis.com/auth/spreadsheets: Full access to spreadsheets.
            https://www.googleapis.com/auth/drive.file: Access to app-created or user-picked Drive files.

  schemas:
    Error:
      type: object
      required: [ok, status, code, message]
      properties:
        ok: { type: boolean }
        status: { type: integer }
        code: { type: string }
        message: { type: string }
        source: { type: string }
    ValuesBody:
      type: object
      properties:
        majorDimension:
          type: string
          enum: [ROWS, COLUMNS]
          description: Whether data is organized by rows or columns
        values:
          type: array
          description: 2D array of values. Each inner array is one row (or column if majorDimension=COLUMNS).
          items:
            type: array
            items:
              oneOf:
                - { type: string }
                - { type: number }
                - { type: boolean }
          example:
            - ["Alice", "alice@example.com", "555-1234"]
            - ["Bob", "bob@example.com", "555-5678"]

security:
  - oauth: []

paths:

  /api/values/get:
    get:
      operationId: getValues
      summary: Read values from a range in a spreadsheet
      description: >
        Retrieves data from a specific range. Use this when you want to READ existing data.
        The range uses A1 notation (e.g., Sheet1!A1:B10). You can specify how values should
        be rendered (formatted, unformatted, or as formulas) and how dates/times are returned.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - name: spreadsheetId
          in: query
          required: true
          schema: { type: string }
          description: The ID of the spreadsheet (found in URL after /d/)
        - name: range
          in: query
          required: true
          schema: { type: string }
          description: A1 notation of the range to read
        - name: valueRenderOption
          in: query
          schema:
            type: string
            enum: [FORMATTED_VALUE, UNFORMATTED_VALUE, FORMULA]
            default: UNFORMATTED_VALUE
        - name: dateTimeRenderOption
          in: query
          schema:
            type: string
            enum: [SERIAL_NUMBER, FORMATTED_STRING]
            default: SERIAL_NUMBER
      responses:
        "200": { description: Successfully retrieved values }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/values/update:
    put:
      operationId: updateValues
      summary: Overwrite existing values in a specific range
      description: >
        Replaces existing data in the specified range. Use this when you want to OVERWRITE
        specific cells with new data. The range must match the dimensions of your values array.
        USER_ENTERED parses strings as formulas/dates; RAW keeps them literal.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
        - { name: range, in: query, required: true, schema: { type: string } }
        - { name: valueInputOption, in: query, schema: { type: string, enum: [RAW, USER_ENTERED], default: USER_ENTERED } }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ValuesBody" }
      responses:
        "200": { description: Successfully updated values }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/values/append:
    post:
      operationId: appendValues
      summary: Append new rows to the end of a sheet
      description: >
        Appends rows of data to the end of a sheet. Use when adding new entries
        without overwriting. The API finds the last row and inserts below it.
        INSERT_ROWS pushes data down; OVERWRITE replaces data in that range.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
        - { name: range, in: query, required: true, schema: { type: string } }
        - { name: valueInputOption, in: query, schema: { type: string, enum: [RAW, USER_ENTERED], default: USER_ENTERED } }
        - { name: insertDataOption, in: query, schema: { type: string, enum: [INSERT_ROWS, OVERWRITE], default: INSERT_ROWS } }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ValuesBody" }
      responses:
        "200": { description: Successfully appended data }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/values/clear:
    post:
      operationId: clearValues
      summary: Clear values from a range
      description: >
        Clears all values from the specified range, leaving the cells empty.
        Use this to delete data while keeping sheet structure intact.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
        - { name: range, in: query, required: true, schema: { type: string } }
      responses:
        "200": { description: Successfully cleared range }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/values/batchUpdate:
    post:
      operationId: batchUpdateValues
      summary: Update multiple ranges in a single request
      description: >
        Batch write across multiple ranges or sheets in one API call. More efficient than
        multiple individual update calls. Each data object specifies its own range and values.
        Use this when you need to update several different areas of a spreadsheet at once.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - name: spreadsheetId
          in: query
          required: true
          schema: { type: string }
          description: The ID of the spreadsheet (found in URL after /d/)
          example: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                valueInputOption:
                  type: string
                  enum: [RAW, USER_ENTERED]
                  default: USER_ENTERED
                  description: How to interpret input values
                data:
                  type: array
                  description: Array of range updates to perform
                  items:
                    type: object
                    properties:
                      range:
                        type: string
                        description: A1 notation of the range
                      majorDimension:
                        type: string
                        enum: [ROWS, COLUMNS]
                      values:
                        type: array
                        description: Two-dimensional array of cell values
                        items:
                          type: array
                          items:
                            oneOf:
                              - { type: string }
                              - { type: number }
                              - { type: boolean }
            example:
              valueInputOption: USER_ENTERED
              data:
                - range: "Sheet1!A1:B2"
                  values:
                    - ["Value1", "Value2"]
                    - ["Value3", "Value4"]
                - range: "Sheet2!C3:D4"
                  values:
                    - ["Value5", "Value6"]
                    - ["Value7", "Value8"]
      responses:
        "200":
          description: Successfully batch updated values
        default:
          description: Error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /api/values/batchClear:
    post:
      operationId: batchClearValues
      summary: Clear multiple ranges in a single request
      description: >
        Clear values from multiple ranges or sheets in one API call. Use when you need
        to clear several areas of a spreadsheet at once.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ranges:
                  type: array
                  items: { type: string }
      responses:
        "200": { description: Successfully batch cleared ranges }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/spreadsheets/get:
    get:
      operationId: getSpreadsheet
      summary: Retrieve spreadsheet metadata and structure
      description: >
        Gets metadata about the spreadsheet including sheet names and properties.
        Does not return cell values. Useful for discovering sheet structure.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
        - { name: includeGridData, in: query, schema: { type: boolean, default: false } }
      responses:
        "200": { description: Successfully retrieved spreadsheet metadata }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/spreadsheets/create:
    post:
      operationId: createSpreadsheet
      summary: Create a new spreadsheet
      description: >
        Creates a new Google Sheets spreadsheet. You can specify the title and initial
        sheet properties. Returns the new spreadsheet ID.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                properties:
                  type: object
                  properties:
                    title: { type: string }
      responses:
        "200": { description: Successfully created spreadsheet }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/spreadsheets/batchUpdate:
    post:
      operationId: batchUpdateSpreadsheet
      summary: Perform structural updates on a spreadsheet
      description: >
        Make structural changes to the spreadsheet (add/delete sheets, change formatting).
        Each request object specifies one operation.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requests:
                  type: array
                  items: { type: object }
      responses:
        "200": { description: Successfully performed structural updates }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/spreadsheets/sheets/copyTo:
    post:
      operationId: copySheetTo
      summary: Copy a sheet to another spreadsheet
      description: >
        Copies an entire sheet (tab) from one spreadsheet to another. Requires source
        spreadsheet ID, sheet ID, and destination spreadsheet ID.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
        - { name: sheetId, in: query, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationSpreadsheetId: { type: string }
      responses:
        "200": { description: Successfully copied sheet }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/spreadsheets/developerMetadata/get:
    get:
      operationId: getDeveloperMetadata
      summary: Retrieve a specific developer metadata entry
      description: >
        Gets custom developer metadata attached to a spreadsheet by applications.
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
        - { name: metadataId, in: query, required: true, schema: { type: string } }
      responses:
        "200": { description: Successfully retrieved metadata }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /api/spreadsheets/developerMetadata/search:
    post:
      operationId: searchDeveloperMetadata
      summary: Search for developer metadata entries
      description: >
        Searches for custom metadata entries by criteria (key or location).
      x-openai-is-consequential: false
      x-openai-isConsequential: false
      x-openai-isSystemAction: true
      parameters:
        - { name: spreadsheetId, in: query, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dataFilters:
                  type: array
                  items: { type: object }
      responses:
        "200": { description: Successfully searched metadata }
        default: { description: Error, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }
